package com.kh.spring.member.controller;

import java.beans.PropertyEditor;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.bind.support.SessionStatus;
import org.springframework.web.servlet.FlashMap;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.springframework.web.servlet.support.RequestContextUtils;

import com.kh.spring.member.model.service.MemberService;
import com.kh.spring.member.model.vo.Member;

import lombok.extern.slf4j.Slf4j;

/**
 * Model
 * - viewÎã®ÏóêÏÑú Ï≤òÎ¶¨Ìï† Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•ÏÜå. Map Í∞ùÏ≤¥
 * 1.Model<<interface>>
 * 		-viewName Î¶¨ÌÑ¥
 * 		-addAttribute(k,v)
 * 2.ModelMap
 * 		-viewName Î¶¨ÌÑ¥
 * 		-addAttribute(k,v)
 * 3.ModelAndView 
 * 		-ViewName(JSPÏúÑÏπò, redirect location) Ìè¨Ìï®, ModelAndView Í∞ùÏ≤¥ Î¶¨ÌÑ¥
 * 		-addObject(k,v)
 *		-RedirectAttributesÍ∞ùÏ≤¥ÏôÄ Ìï®Íªò ÏÇ¨Ïö©ÌïòÏßÄ Îßê Í≤É.
 *
 *@ModelAttribute
 *1. Î©îÏÜåÎìúÎ†àÎ≤®
 *	- Ìï¥ÎãπÎ©îÏÜåÎìúÏùò  Î¶¨ÌÑ¥Í∞íÏùÑ modelÏóê Ï†ÄÏû•Ìï¥ÏÑú Î™®Îì† ÏöîÏ≤≠(Ìï∏Îì§Îü¨)Ïóê ÏÇ¨Ïö©.
 *2. Î©îÏÜåÎìúÎß§Í∞úÎ≥ÄÏàò
 *	- modelÏóê Ï†ÄÏû•Îêú ÎèôÏùºÌïú Ïù¥Î¶ÑÏùò ÏÜçÏÑ±(session)Ïù¥ ÏûàÎäî Í≤ΩÏö∞ getterÎ°ú ÏÇ¨Ïö©
 *	- Ìï¥Îãπ Îß§Í∞úÎ≥ÄÏàòÎ•º model ÏÜçÏÑ±ÏúºÎ°ú Ï†ÄÏû•
 *		-Ïª§Îß®ÎìúÍ∞ùÏ≤¥Ïóê @ModelAttribute(ÏÜçÏÑ±Î™Ö)ÏúºÎ°ú ÏßÄÏ†ï
 *		-Îã®Ïàú ÏÇ¨Ïö©Ïûê ÏûÖÎ†•Í∞íÏùÄ @RequestParamÏúºÎ°ú Ï≤òÎ¶¨Ìï† Í≤É 
 *
 *
 */
@Slf4j
@Controller
@RequestMapping("/member")
@SessionAttributes(value={"loginMember", "anotherValue"}) //Ïó¨Îü¨Í∞úÎäî Ïù¥Î†áÍ≤å ÏîÄ 
public class MemberController {
	@Autowired
	private MemberService memberService;
	
	//ÎûúÎç§ ÏÜîÌä∏Í∞í -> Îß§Î≤à Îã§Î•¥Îã§.
	@Autowired
	private BCryptPasswordEncoder bcryptPasswordEncoder;
	
	@ModelAttribute("common")
	public Map<String, Object> common(){
		log.info("@ModelAttribute - common Ïã§Ìñâ!");
		Map<String, Object> map = new HashMap<>();
		map.put("adminEmail", "admin@spring.kh.com");
		return map;
	}
	
	@GetMapping("/memberEnroll.do")
	public void memberEnroll() {
		//ViewTranslatorÏóê ÏùòÌï¥ÏÑú ÏöîÏ≤≠ urlÏóêÏÑú viewÎã® jspÏ£ºÏÜåÎ•º Ï∂îÎ°†ÌïúÎã§.	
	}
	
	@PostMapping("/memberEnroll.do")
	public String memberEnroll(Member member, RedirectAttributes attr) {
		log.info("member{}",member);
		try {
			//ÏïîÌò∏Ìôî Ï≤òÎ¶¨
			String rawPassword = member.getPassword();
			String encodedPassword = bcryptPasswordEncoder.encode(rawPassword);
			log.info("rawPassword = {}",rawPassword);
			log.info("encodedPassword = {}", encodedPassword);
			member.setPassword(encodedPassword);
			
			memberService.insertMember(member);
			String msg = "ÌöåÏõê Îì±Î°ù ÏÑ±Í≥µ!";
			attr.addFlashAttribute("msg", msg);
		
		} catch (Exception e) {
			log.error(e.getMessage(),e);
			throw e;
		}
		return "redirect:/";
	}
	
	/**
	 * Ïª§Îß®Îìú Í∞ùÏ≤¥ Ïù¥Ïö©Ïãú ÏÇ¨Ïö©Ïûê ÏûÖÎ†•Í∞í(String)ÏùÑ ÌäπÏ†ï ÌïÑÎìúÌÉÄÏûÖÏúºÎ°ú Î≥ÄÌôòÌï† editorÍ∞ùÏ≤¥Î•º ÏÑ§Ï†ï
	 * ÏûêÎèôÏúºÎ°ú Ìò∏Ï∂úÎê®
	 * @param binder
	 */
	@InitBinder
	public void initBinder(WebDataBinder binder) {
		//Member.birthDay:java.sql.Date ÌÉÄÏûÖÏ≤òÎ¶¨
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		
		//Ïª§Ïä§ÌÖÄ ÏóêÎîîÌÑ∞ ÏÉùÏÑ± : allowEmpty - true (Îπà Î¨∏ÏûêÏó¥ Ï≤òÎ¶¨ ÌóàÏö©) 
		PropertyEditor editor = new CustomDateEditor(sdf, true);
		binder.registerCustomEditor(java.sql.Date.class, editor);
	}
	
	@GetMapping("/login.do")
	public ModelAndView login(ModelAndView mav) {
		// ÏûêÎèôÏúºÎ°ú /WEB-INF/views/member/login.jspÎ•º Ï∞æÏùå
		// ÌòÑÏû¨ ÏöîÏ≤≠ urlÏóêÏÑú Ï∂îÏ∏°Ìï®
		mav.addObject("test", "hello world");
		mav.setViewName("member/login");
		return mav;
	}
	
	/**
	 * requestAttrÎûë modleview Ï∂©Îèå Í≤ÄÏÉâ
	 * 
	 * Ï∂©ÎèåÎÇòÏÑú HttpServletRequestÎ•º ÎåÄÏã†Ïì¥Îã§
	 * @param id
	 * @param password
	 * @param mav
	 * @param request
	 * @return
	 */
	
	@PostMapping("/login.do")
	public ModelAndView login(
		   @ModelAttribute @RequestParam String id,
						@RequestParam String password,
						ModelAndView mav,
						HttpServletRequest request) {
		log.info("id={},password={}", id, password);
		//Ìï¥Îãπ idÏùò memberÏ°∞Ìöå
		Member member = memberService.selectOneMember(id);
		log.info("member = {}", member);
		log.info("encodePassword = {}",bcryptPasswordEncoder.encode(password));
		
		try {
			//Î°úÍ∑∏Ïù∏ Ïó¨Î∂ÄÏ≤òÎ¶¨
			if(member != null &&
					bcryptPasswordEncoder.matches(password,member.getPassword()))
			{
				//Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ
				//Í∏∞Î≥∏Í∞íÏúºÎ°ú request scope ÏÜçÏÑ±Ïóê Ï†ÄÏû•.
				//ÌÅ¥ÎûòÏä§ Î†àÎ≤®Ïóê @SessionAttributes("loginMember")ÏßÄÏ†ïÌïòÎ©¥, session scopeÏóê Ï†ÄÏû•
				mav.addObject("loginMember", member);

			}else {
				//Î°úÍ∑∏Ïù∏ Ïã§Ìå®
				//redirectAttr.addFlashAttribute("msg", "ÏïÑÏù¥Îîî ÎòêÎäî ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏùºÏπòÌïòÏßÄ ÏïäÏäµÎãàÎã§.");
				FlashMap flashMap = RequestContextUtils.getOutputFlashMap(request);
				flashMap.put("msg", "ÏïÑÏù¥Îîî ÎòêÎäî ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏùºÏπòÌïòÏßÄ ÏïäÏäµÎãàÎã§.");				
			}
			
			mav.setViewName("redirect:/");
			return mav;
			
		} catch (Exception e) {
			log.error(e.getMessage(),e);
			throw e;
		}
	}
	
	/**
	 * @SessionAttributes Î•º ÌÜµÌïú Î°úÍ∑∏Ïù∏ÏùÄ
	 * SessionStatusÍ∞ùÏ≤¥Î•º ÌÜµÌï¥ÏÑú ÏÇ¨Ïö©ÏôÑÎ£åÏ≤òÎ¶¨Ìï®ÏúºÎ°ú Î°úÍ∑∏ÏïÑÏõÉÌïúÎã§.
	 * @return
	 */
	@GetMapping("/logout.do")
	public String logout(SessionStatus sessionStatus) {
		if(!sessionStatus.isComplete()) {
			sessionStatus.setComplete();
		}
		return "redirect:/";
	}
	
	@GetMapping("/memberDetail.do")
	public ModelAndView memberDetail(@ModelAttribute("loginMember") Member loginMember, ModelAndView mav) {
		log.info("loginMember ={}", loginMember);
		mav.setViewName("member/memberDetail");
		
		return mav;
	}
	
	//ÏàòÏ†ï,ÏÇ≠Ï†úÎäî Í≤∞Í≥ºÍ∞Ä 0ÏùºÏàòÎèÑÏûàÎã§.
	@PostMapping("/memberUpdate.do")
	public ModelAndView update(Member member, ModelAndView mav) {
		log.info("update member = {}", member);
		
		try {
			int result = memberService.updateMember(member);
			
			if(result > 0 ) {
				//throw new RuntimeException("Î©§Î≤ÑÍ∞Ä ÏóÖÏä¥");
			}
			
			String msg = "ÏàòÏ†ï ÏÑ±Í≥µ ü§ó	";
			mav.addObject("msg", msg);
			mav.addObject("loginMember", member);
			mav.setViewName("redirect:/member/memberDetail.do");
			
			return mav;
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw e;
		}
	}
}
